#! /usr/bin/env bash

set -e 
set -u
if [ "${1}" = "-h" ]; then
  printf "Usage:\n"
  printf "  %s handler_directory (list of directories to watch)\n" $(basename $0)
  printf "\nYou can put handlers in a central location specified by the\n"
  printf "handler_directory parameter, or in any watched directory. Handlers\n"
  printf "in watched directories take precdence over global handlers.\n"
  printf "\nhandler file name format:\n"
  printf "\n    handle_file_change.[everytime|all|<extension>]\n"
  printf "\n"
  exit 0
fi

GLOBAL_HANDLER_DIR=${1?You need to provide a directory containing event handlers}
shift

if [ $# -eq 0 ]; then
  printf "You must provide a list of directories to watch"
  exit 1
fi
WATCH_DIRS=${@}

function exec_and_continue(){
  set +e
  export WATCH_ROOT=$(pwd)
  $1 $2
  set -e
}

function abspath {
    if [[ -d "$1" ]]; then
        pushd "$1" >/dev/null
        pwd
        popd >/dev/null
    elif [[ -e $1 ]]; then
        pushd "$(dirname "$1")" >/dev/null
        echo "$(pwd)/$(basename "$1")"
        popd >/dev/null
    elif [[ ${1:0:1} != "/" ]]; then
        echo "$(pwd)/${1}"
    else
        # it's already absolute
        echo "$1"
    fi
}

function find_and_invoke_handler(){
  local HANDLER_DIR=${1}
  local FILE_PATH=${2}
  # as a convenience we allow handlers by extension, so we'll pick off the extension
  # for use in finding any handlers we may have
  local EXT=${FILE_PATH##*.}
  local HANDLED=
  printf "looking for files in: %s to handle: %s\n" "${HANDLER_DIR}" "${FILE_PATH}"
  # first we fire the 'everytime' handler if it exists, this one
  # gets called all the time, more specific handlers will be called after this one
  if [ -x "${HANDLER_DIR}/.handle_file_change.everytime" ]; then
    exec_and_continue "${HANDLER_DIR}/.handle_file_change.everytime" "${FILE_PATH}"
  fi
  # the first one of these handlers to 'hit' will cause the execution of
  # further handlers to stop, and we'll move on to the next event. First we
  # fire the 'all' handler if it exists.
  if [ -x "${HANDLER_DIR}/.handle_file_change.all" ]; then
    exec_and_continue "${HANDLER_DIR}/.handle_file_change.all" "${FILE_PATH}"
    return 0
  fi
  # then we fire any individual file handlers we have (by extension)
  if [ -x "${HANDLER_DIR}/.handle_file_change.${EXT}" ]; then
    exec_and_continue "${HANDLER_DIR}/.handle_file_change.${EXT}" "${FILE_PATH}"
    return 0
  fi
  # if we've not handled anything we give the chance to the 'any' handler
  # this one will only fire in the case that the neither the all nor a extension
  # specific handler has fired
  if [ -x "${HANDLER_DIR}/.handle_file_change.any" ]; then
    exec_and_continue "${HANDLER_DIR}/.handle_file_change.any" "${FILE_PATH}"
    return 0
  fi
  if [ "${HANDLER_DIR}" == "$(pwd)" -o "${HANDLER_DIR}" == "/" -o "${HANDLER_DIR}" == "${GLOBAL_HANDLER_DIR}" ]; then
    return 1;
  else
    find_and_invoke_handler "$(dirname ${HANDLER_DIR})" "$FILE_PATH"
  fi
  return 0;
}

export -f find_and_invoke_handler


if which fswatch > /dev/null 2>&1; then
  function watch_function() {
    fswatch ${@}
  }
fi

if which inotifywait > /dev/null 2>&1; then
  function watch_function() {
    inotifywait -e close_write,delete --format '%w%f' -m -r ${@}
  }
fi

while read -r line;
do
  # we want the absolute path so we can pass it to our handlers
  FILE_PATH=$(abspath $line)
  FILE_NAME=$(basename $line)
  if echo "${FILE_NAME}" | grep ^\\. 
  then
    echo "we ignore hidden files: " $FILE_PATH
    continue
  fi
  # The directory containing the file that changed, we use this to find any
  # directory specific handlers
  CHANGED_FILE_DIR=$(dirname ${FILE_PATH})
  # find a handler and invoke it, if at all possible first by checking the
  # directory in which the change occurred
  if ! find_and_invoke_handler ${CHANGED_FILE_DIR} ${FILE_PATH}; then
    # if there's no handler local to the directory containing the changed file
    # then we look in the 'global' handler directory
    if ! find_and_invoke_handler ${GLOBAL_HANDLER_DIR} ${FILE_PATH}; then
      printf "couldn't find any handlers for changed file %s\n" ${FILE_PATH}
    fi
  fi
done < <(watch_function ${WATCH_DIRS})
